// SkillSwap Application JavaScript

// Application State
const AppState = {
  currentUser: null,
  currentPage: 'home',
  users: [],
  exchanges: [],
  skillCategories: [],
  experienceLevels: ['Beginner', 'Intermediate', 'Advanced', 'Expert'],
  featuredSkills: [],
  platformStats: {},
  conversations: [],
  activeConversation: null
};

// Sample Data
const sampleData = {
  users: [
    {
      id: 1,
      name: "Sarah Chen",
      email: "sarah@example.com",
      bio: "Full-stack developer passionate about teaching web technologies and learning design skills",
      location: "San Francisco, CA",
      avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b5c0?w=150&h=150&fit=crop&crop=face",
      rating: 4.8,
      total_exchanges: 23,
      tokens_earned: 340,
      skills_offered: [
        {
          name: "React Development",
          category: "Programming",
          experience_level: "Expert",
          description: "Building modern web applications with React, Redux, and hooks"
        },
        {
          name: "Node.js Backend",
          category: "Programming",
          experience_level: "Advanced",
          description: "Server-side development with Express, MongoDB, and APIs"
        }
      ],
      skills_wanted: [
        {
          name: "UI/UX Design",
          category: "Design",
          experience_level: "Beginner",
          description: "Learning user interface and experience design principles"
        },
        {
          name: "Digital Marketing",
          category: "Marketing",
          experience_level: "Intermediate",
          description: "Social media marketing and SEO strategies"
        }
      ],
      badges: ["First Exchange", "5-Star Rating", "Helpful Mentor", "Quick Responder"],
      join_date: "2024-03-15",
      active_exchanges: 3
    },
    {
      id: 2,
      name: "Miguel Rodriguez",
      email: "miguel@example.com",
      bio: "Graphic designer and digital artist looking to expand into web development",
      location: "Austin, TX",
      avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face",
      rating: 4.9,
      total_exchanges: 31,
      tokens_earned: 475,
      skills_offered: [
        {
          name: "Graphic Design",
          category: "Design",
          experience_level: "Expert",
          description: "Logo design, branding, and visual identity creation"
        },
        {
          name: "Adobe Creative Suite",
          category: "Design",
          experience_level: "Expert",
          description: "Photoshop, Illustrator, InDesign mastery"
        },
        {
          name: "Digital Illustration",
          category: "Art",
          experience_level: "Advanced",
          description: "Character design and digital artwork"
        }
      ],
      skills_wanted: [
        {
          name: "JavaScript",
          category: "Programming",
          experience_level: "Beginner",
          description: "Basic programming and web interactivity"
        },
        {
          name: "Python",
          category: "Programming",
          experience_level: "Beginner",
          description: "Data analysis and automation scripts"
        }
      ],
      badges: ["First Exchange", "5-Star Rating", "Design Master", "Community Helper", "Top Contributor"],
      join_date: "2024-01-22",
      active_exchanges: 2
    },
    {
      id: 3,
      name: "Dr. Priya Patel",
      email: "priya@example.com",
      bio: "Data scientist and researcher interested in creative skills and business strategy",
      location: "New York, NY",
      avatar: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=150&h=150&fit=crop&crop=face",
      rating: 4.7,
      total_exchanges: 18,
      tokens_earned: 290,
      skills_offered: [
        {
          name: "Data Science",
          category: "Technology",
          experience_level: "Expert",
          description: "Machine learning, statistics, and data visualization"
        },
        {
          name: "Python Programming",
          category: "Programming",
          experience_level: "Expert",
          description: "Advanced Python for data analysis and automation"
        },
        {
          name: "Research Methods",
          category: "Academic",
          experience_level: "Expert",
          description: "Scientific research design and statistical analysis"
        }
      ],
      skills_wanted: [
        {
          name: "Photography",
          category: "Art",
          experience_level: "Beginner",
          description: "Portrait and landscape photography techniques"
        },
        {
          name: "Business Strategy",
          category: "Business",
          experience_level: "Intermediate",
          description: "Strategic planning and market analysis"
        }
      ],
      badges: ["First Exchange", "Data Expert", "Research Pro"],
      join_date: "2024-05-10",
      active_exchanges: 1
    },
    {
      id: 4,
      name: "James Wilson",
      email: "james@example.com",
      bio: "Marketing professional and photographer wanting to learn coding and design",
      location: "Seattle, WA",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
      rating: 4.6,
      total_exchanges: 15,
      tokens_earned: 230,
      skills_offered: [
        {
          name: "Digital Marketing",
          category: "Marketing",
          experience_level: "Expert",
          description: "SEO, social media marketing, and content strategy"
        },
        {
          name: "Photography",
          category: "Art",
          experience_level: "Advanced",
          description: "Portrait, event, and commercial photography"
        },
        {
          name: "Content Writing",
          category: "Writing",
          experience_level: "Advanced",
          description: "Blog posts, copy writing, and content strategy"
        }
      ],
      skills_wanted: [
        {
          name: "Web Development",
          category: "Programming",
          experience_level: "Beginner",
          description: "HTML, CSS, and basic JavaScript"
        },
        {
          name: "Graphic Design",
          category: "Design",
          experience_level: "Intermediate",
          description: "Visual design and branding skills"
        }
      ],
      badges: ["First Exchange", "Marketing Master", "Photo Pro"],
      join_date: "2024-06-20",
      active_exchanges: 2
    },
    {
      id: 5,
      name: "Lisa Kim",
      email: "lisa@example.com",
      bio: "Language teacher and cultural consultant passionate about technology and art",
      location: "Los Angeles, CA",
      avatar: "https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150&h=150&fit=crop&crop=face",
      rating: 4.9,
      total_exchanges: 27,
      tokens_earned: 410,
      skills_offered: [
        {
          name: "Korean Language",
          category: "Languages",
          experience_level: "Expert",
          description: "Native speaker offering conversational and business Korean"
        },
        {
          name: "English Tutoring",
          category: "Education",
          experience_level: "Expert",
          description: "ESL teaching and academic writing support"
        },
        {
          name: "Cultural Consulting",
          category: "Consulting",
          experience_level: "Advanced",
          description: "Cross-cultural communication and business etiquette"
        }
      ],
      skills_wanted: [
        {
          name: "Mobile App Development",
          category: "Programming",
          experience_level: "Beginner",
          description: "iOS and Android app creation"
        },
        {
          name: "Video Editing",
          category: "Media",
          experience_level: "Intermediate",
          description: "Content creation and storytelling through video"
        }
      ],
      badges: ["First Exchange", "5-Star Rating", "Language Expert", "Cultural Bridge", "Top Mentor"],
      join_date: "2024-02-08",
      active_exchanges: 4
    }
  ],
  skillCategories: [
    "Programming", "Design", "Marketing", "Languages", "Art", "Business",
    "Technology", "Education", "Writing", "Media", "Music", "Fitness",
    "Cooking", "Consulting", "Academic"
  ],
  exchanges: [
    {
      id: 1,
      requester_id: 1,
      provider_id: 2,
      requested_skill: "Graphic Design",
      offered_skill: "React Development",
      status: "active",
      created_date: "2024-10-10",
      messages: [
        {
          user_id: 1,
          message: "Hi Miguel! I'd love to learn graphic design from you. I can teach you React in exchange.",
          timestamp: "2024-10-10 14:30"
        },
        {
          user_id: 2,
          message: "That sounds perfect Sarah! I've been wanting to learn React. When would you like to start?",
          timestamp: "2024-10-10 15:45"
        },
        {
          user_id: 1,
          message: "How about we start with a 1-hour session this weekend? I can show you React basics first.",
          timestamp: "2024-10-10 16:20"
        }
      ]
    },
    {
      id: 2,
      requester_id: 3,
      provider_id: 4,
      requested_skill: "Photography",
      offered_skill: "Data Science",
      status: "completed",
      created_date: "2024-09-15",
      completed_date: "2024-10-01",
      rating: 5,
      review: "James was an excellent photography teacher! Very patient and knowledgeable."
    },
    {
      id: 3,
      requester_id: 4,
      provider_id: 1,
      requested_skill: "Web Development",
      offered_skill: "Digital Marketing",
      status: "pending",
      created_date: "2024-10-14",
      messages: [
        {
          user_id: 4,
          message: "Hi Sarah! I saw your React skills and would love to learn web development. I can teach digital marketing in return.",
          timestamp: "2024-10-14 10:15"
        }
      ]
    }
  ],
  platformStats: {
    total_users: 12847,
    total_exchanges: 3421,
    skills_taught: 847,
    success_rate: 94,
    average_rating: 4.7
  },
  featuredSkills: [
    {
      name: "React Development",
      category: "Programming",
      provider: "Sarah Chen",
      rating: 4.8,
      image: "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=300&h=200&fit=crop"
    },
    {
      name: "Graphic Design",
      category: "Design",
      provider: "Miguel Rodriguez",
      rating: 4.9,
      image: "https://images.unsplash.com/photo-1561736778-92e52a7769ef?w=300&h=200&fit=crop"
    },
    {
      name: "Data Science",
      category: "Technology",
      provider: "Dr. Priya Patel",
      rating: 4.7,
      image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=300&h=200&fit=crop"
    },
    {
      name: "Photography",
      category: "Art",
      provider: "James Wilson",
      rating: 4.6,
      image: "https://images.unsplash.com/photo-1606983340126-99ab4feaa64a?w=300&h=200&fit=crop"
    }
  ]
};

// Initialize App State
function initializeApp() {
  AppState.users = [...sampleData.users];
  AppState.exchanges = [...sampleData.exchanges];
  AppState.skillCategories = [...sampleData.skillCategories];
  AppState.featuredSkills = [...sampleData.featuredSkills];
  AppState.platformStats = { ...sampleData.platformStats };
  
  // Initialize conversations from exchanges
  initializeConversations();
  
  // Set up event listeners
  setupEventListeners();
  
  // Render initial page
  renderPage();
}

// Initialize conversations from exchanges
function initializeConversations() {
  AppState.conversations = AppState.exchanges
    .filter(exchange => exchange.messages && exchange.messages.length > 0)
    .map(exchange => {
      const otherUserId = AppState.currentUser 
        ? (exchange.requester_id === AppState.currentUser.id ? exchange.provider_id : exchange.requester_id)
        : exchange.requester_id;
      const otherUser = AppState.users.find(u => u.id === otherUserId);
      const lastMessage = exchange.messages[exchange.messages.length - 1];
      
      return {
        id: exchange.id,
        userId: otherUserId,
        userName: otherUser ? otherUser.name : 'Unknown User',
        userAvatar: otherUser ? otherUser.avatar : '',
        lastMessage: lastMessage.message,
        lastMessageTime: lastMessage.timestamp,
        messages: exchange.messages
      };
    });
}

// Setup Event Listeners
function setupEventListeners() {
  // Navigation links
  document.addEventListener('click', (e) => {
    if (e.target.hasAttribute('data-page')) {
      e.preventDefault();
      const page = e.target.getAttribute('data-page');
      navigateToPage(page);
    }
  });

  // Mobile navigation toggle
  const navToggle = document.getElementById('navToggle');
  const navMenu = document.getElementById('navMenu');
  if (navToggle && navMenu) {
    navToggle.addEventListener('click', () => {
      navMenu.classList.toggle('active');
    });
  }

  // Forms
  const loginForm = document.getElementById('loginForm');
  const signupForm = document.getElementById('signupForm');
  
  if (loginForm) {
    loginForm.addEventListener('submit', handleLogin);
  }
  
  if (signupForm) {
    signupForm.addEventListener('submit', handleSignup);
  }

  // Logout
  const logoutBtn = document.getElementById('logoutBtn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', handleLogout);
  }

  // Search and filters
  const skillSearch = document.getElementById('skillSearch');
  const categoryFilter = document.getElementById('categoryFilter');
  const levelFilter = document.getElementById('levelFilter');
  
  if (skillSearch) {
    skillSearch.addEventListener('input', filterSkills);
  }
  
  if (categoryFilter) {
    categoryFilter.addEventListener('change', filterSkills);
  }
  
  if (levelFilter) {
    levelFilter.addEventListener('change', filterSkills);
  }

  // Modal close
  const closeModal = document.getElementById('closeModal');
  if (closeModal) {
    closeModal.addEventListener('click', () => {
      document.getElementById('exchangeModal').classList.remove('show');
    });
  }

  // Chat input
  const messageInput = document.getElementById('messageInput');
  const sendMessageBtn = document.getElementById('sendMessageBtn');
  
  if (messageInput) {
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
  }
  
  if (sendMessageBtn) {
    sendMessageBtn.addEventListener('click', sendMessage);
  }
}

// Navigation
function navigateToPage(page, userId = null) {
  AppState.currentPage = page;
  
  // Update active nav links
  document.querySelectorAll('.nav-link').forEach(link => {
    link.classList.remove('active');
    if (link.getAttribute('data-page') === page) {
      link.classList.add('active');
    }
  });
  
  // Close mobile menu
  const navMenu = document.getElementById('navMenu');
  if (navMenu) {
    navMenu.classList.remove('active');
  }
  
  renderPage(userId);
}

// Render current page
function renderPage(userId = null) {
  // Hide all pages
  document.querySelectorAll('.page').forEach(page => {
    page.style.display = 'none';
  });
  
  // Show current page
  const currentPageElement = document.getElementById(AppState.currentPage + 'Page');
  if (currentPageElement) {
    currentPageElement.style.display = 'block';
  }
  
  // Render page content
  switch (AppState.currentPage) {
    case 'home':
      renderHomePage();
      break;
    case 'dashboard':
      if (AppState.currentUser) {
        renderDashboard();
      } else {
        navigateToPage('login');
      }
      break;
    case 'marketplace':
      renderMarketplace();
      break;
    case 'profile':
      renderProfile(userId);
      break;
    case 'messages':
      if (AppState.currentUser) {
        renderMessages();
      } else {
        navigateToPage('login');
      }
      break;
  }
}

// Authentication handlers
function handleLogin(e) {
  e.preventDefault();
  const email = document.getElementById('loginEmail').value;
  const password = document.getElementById('loginPassword').value;
  
  // Simple authentication (in real app, this would be secure)
  const user = AppState.users.find(u => u.email === email);
  if (user) {
    AppState.currentUser = user;
    updateNavigation();
    initializeConversations(); // Re-initialize conversations for the logged-in user
    showNotification('Welcome back, ' + user.name + '!', 'success');
    navigateToPage('dashboard');
  } else {
    showNotification('Invalid credentials. Try sarah@example.com', 'error');
  }
}

function handleSignup(e) {
  e.preventDefault();
  const name = document.getElementById('signupName').value;
  const email = document.getElementById('signupEmail').value;
  const location = document.getElementById('signupLocation').value;
  
  // Check if email already exists
  if (AppState.users.find(u => u.email === email)) {
    showNotification('Email already exists!', 'error');
    return;
  }
  
  // Create new user
  const newUser = {
    id: AppState.users.length + 1,
    name: name,
    email: email,
    bio: 'New SkillSwap member',
    location: location,
    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
    rating: 0,
    total_exchanges: 0,
    tokens_earned: 50, // Welcome bonus
    skills_offered: [],
    skills_wanted: [],
    badges: ['New Member'],
    join_date: new Date().toISOString().split('T')[0],
    active_exchanges: 0
  };
  
  AppState.users.push(newUser);
  AppState.currentUser = newUser;
  updateNavigation();
  showNotification('Welcome to SkillSwap, ' + name + '!', 'success');
  navigateToPage('dashboard');
}

function handleLogout() {
  AppState.currentUser = null;
  updateNavigation();
  showNotification('Logged out successfully!', 'success');
  navigateToPage('home');
}

// Update navigation based on auth state
function updateNavigation() {
  const navAuth = document.getElementById('navAuth');
  const navUser = document.getElementById('navUser');
  const dashboardLink = document.getElementById('dashboardLink');
  const messagesLink = document.getElementById('messagesLink');
  const userTokens = document.getElementById('userTokens');
  const userAvatar = document.getElementById('userAvatar');
  
  if (AppState.currentUser) {
    navAuth.style.display = 'none';
    navUser.style.display = 'flex';
    dashboardLink.style.display = 'block';
    messagesLink.style.display = 'block';
    userTokens.textContent = AppState.currentUser.tokens_earned + ' tokens';
    userAvatar.style.backgroundImage = `url(${AppState.currentUser.avatar})`;
  } else {
    navAuth.style.display = 'flex';
    navUser.style.display = 'none';
    dashboardLink.style.display = 'none';
    messagesLink.style.display = 'none';
  }
}

// Render Home Page
function renderHomePage() {
  const featuredSkillsGrid = document.getElementById('featuredSkillsGrid');
  if (featuredSkillsGrid) {
    featuredSkillsGrid.innerHTML = AppState.featuredSkills.map(skill => `
      <div class="skill-card">
        <img src="${skill.image}" alt="${skill.name}" class="skill-image">
        <div class="skill-info">
          <h4 class="skill-name">${skill.name}</h4>
          <p class="skill-provider">by ${skill.provider}</p>
          <div class="skill-rating">
            <span>⭐ ${skill.rating}</span>
            <span class="skill-category">${skill.category}</span>
          </div>
        </div>
      </div>
    `).join('');
  }
}

// Render Dashboard
function renderDashboard() {
  if (!AppState.currentUser) return;
  
  const user = AppState.currentUser;
  
  // Update dashboard header
  const dashboardUserName = document.getElementById('dashboardUserName');
  const userTotalExchanges = document.getElementById('userTotalExchanges');
  const userTokenCount = document.getElementById('userTokenCount');
  const userRating = document.getElementById('userRating');
  
  if (dashboardUserName) dashboardUserName.textContent = user.name;
  if (userTotalExchanges) userTotalExchanges.textContent = user.total_exchanges;
  if (userTokenCount) userTokenCount.textContent = user.tokens_earned;
  if (userRating) userRating.textContent = user.rating.toFixed(1);
  
  // Render recommended matches
  renderRecommendedMatches();
  
  // Render active exchanges
  renderActiveExchanges();
  
  // Render user badges
  renderUserBadges();
  
  // Render recent messages
  renderRecentMessages();
}

// Render recommended matches
function renderRecommendedMatches() {
  const recommendedMatches = document.getElementById('recommendedMatches');
  if (!recommendedMatches || !AppState.currentUser) return;
  
  const matches = findSkillMatches(AppState.currentUser);
  
  recommendedMatches.innerHTML = matches.length > 0 
    ? matches.slice(0, 3).map(match => `
        <div class="match-card">
          <div class="flex items-center gap-8 mb-8">
            <img src="${match.user.avatar}" alt="${match.user.name}" 
                 style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;">
            <div>
              <div style="font-weight: 500;">${match.user.name}</div>
              <div style="font-size: 12px; color: var(--color-text-secondary);">
                ${match.skill.name} • ${match.skill.experience_level}
              </div>
            </div>
          </div>
          <p style="font-size: 12px; color: var(--color-text-secondary); margin-bottom: 12px;">
            ${match.skill.description}
          </p>
          <button class="btn btn--primary btn--sm" onclick="openExchangeModal(${match.user.id}, '${match.skill.name}')">
            Send Request
          </button>
        </div>
      `).join('')
    : '<p style="color: var(--color-text-secondary);">No matches found. Update your wanted skills to get recommendations.</p>';
}

// Render active exchanges
function renderActiveExchanges() {
  const activeExchanges = document.getElementById('activeExchanges');
  if (!activeExchanges || !AppState.currentUser) return;
  
  const userExchanges = AppState.exchanges.filter(ex => 
    (ex.requester_id === AppState.currentUser.id || ex.provider_id === AppState.currentUser.id) &&
    ex.status === 'active'
  );
  
  activeExchanges.innerHTML = userExchanges.length > 0
    ? userExchanges.map(exchange => {
        const otherUserId = exchange.requester_id === AppState.currentUser.id 
          ? exchange.provider_id : exchange.requester_id;
        const otherUser = AppState.users.find(u => u.id === otherUserId);
        
        return `
          <div class="exchange-card">
            <div class="flex items-center gap-8 mb-8">
              <img src="${otherUser.avatar}" alt="${otherUser.name}" 
                   style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;">
              <div>
                <div style="font-weight: 500;">${otherUser.name}</div>
                <div style="font-size: 12px; color: var(--color-text-secondary);">
                  ${exchange.requested_skill} ↔ ${exchange.offered_skill}
                </div>
              </div>
            </div>
            <div class="flex gap-8">
              <button class="btn btn--secondary btn--sm" onclick="navigateToPage('messages')">
                Message
              </button>
              <button class="btn btn--outline btn--sm">
                View Details
              </button>
            </div>
          </div>
        `;
      }).join('')
    : '<p style="color: var(--color-text-secondary);">No active exchanges.</p>';
}

// Render user badges
function renderUserBadges() {
  const userBadges = document.getElementById('userBadges');
  if (!userBadges || !AppState.currentUser) return;
  
  userBadges.innerHTML = AppState.currentUser.badges.length > 0
    ? AppState.currentUser.badges.map(badge => `
        <div class="badge">${badge}</div>
      `).join('')
    : '<p style="color: var(--color-text-secondary);">No badges earned yet.</p>';
}

// Render recent messages
function renderRecentMessages() {
  const recentMessages = document.getElementById('recentMessages');
  if (!recentMessages || !AppState.currentUser) return;
  
  const userConversations = AppState.conversations.slice(0, 3);
  
  recentMessages.innerHTML = userConversations.length > 0
    ? userConversations.map(conv => `
        <div class="message-preview" onclick="navigateToPage('messages')" style="cursor: pointer;">
          <div class="flex items-center gap-8 mb-4">
            <img src="${conv.userAvatar}" alt="${conv.userName}" 
                 style="width: 24px; height: 24px; border-radius: 50%; object-fit: cover;">
            <span style="font-weight: 500; font-size: 12px;">${conv.userName}</span>
          </div>
          <p style="font-size: 11px; color: var(--color-text-secondary); margin: 0;">
            ${conv.lastMessage.substring(0, 60)}${conv.lastMessage.length > 60 ? '...' : ''}
          </p>
        </div>
      `).join('')
    : '<p style="color: var(--color-text-secondary);">No messages yet.</p>';
}

// Render Marketplace
function renderMarketplace() {
  const skillsMarketplace = document.getElementById('skillsMarketplace');
  const categoryFilter = document.getElementById('categoryFilter');
  
  // Populate category filter
  if (categoryFilter && categoryFilter.children.length === 1) {
    AppState.skillCategories.forEach(category => {
      const option = document.createElement('option');
      option.value = category;
      option.textContent = category;
      categoryFilter.appendChild(option);
    });
  }
  
  // Render all skills
  renderSkillsGrid();
}

// Render skills grid
function renderSkillsGrid(filteredSkills = null) {
  const skillsMarketplace = document.getElementById('skillsMarketplace');
  if (!skillsMarketplace) return;
  
  const skills = filteredSkills || getAllSkills();
  
  skillsMarketplace.innerHTML = skills.length > 0
    ? skills.map(skillData => `
        <div class="marketplace-skill-card">
          <div class="skill-header">
            <div class="skill-avatar" style="background-image: url(${skillData.user.avatar})"></div>
            <div class="skill-meta">
              <h4 class="skill-title">${skillData.skill.name}</h4>
              <p class="skill-user">by ${skillData.user.name}</p>
              <span class="skill-category">${skillData.skill.category}</span>
            </div>
          </div>
          <p class="skill-description">${skillData.skill.description}</p>
          <div class="skill-footer">
            <span class="skill-level">${skillData.skill.experience_level}</span>
            <div class="flex gap-8">
              <button class="btn btn--outline btn--sm" 
                      onclick="navigateToPage('profile', ${skillData.user.id})">
                View Profile
              </button>
              ${AppState.currentUser && AppState.currentUser.id !== skillData.user.id 
                ? `<button class="btn btn--primary btn--sm" 
                           onclick="openExchangeModal(${skillData.user.id}, '${skillData.skill.name}')">
                     Request Exchange
                   </button>`
                : ''}
            </div>
          </div>
        </div>
      `).join('')
    : '<p style="text-align: center; color: var(--color-text-secondary); grid-column: 1 / -1;">No skills found.</p>';
}

// Get all skills from all users
function getAllSkills() {
  const skills = [];
  AppState.users.forEach(user => {
    user.skills_offered.forEach(skill => {
      skills.push({ user, skill });
    });
  });
  return skills;
}

// Filter skills based on search and filters
function filterSkills() {
  const searchTerm = document.getElementById('skillSearch')?.value.toLowerCase() || '';
  const categoryFilter = document.getElementById('categoryFilter')?.value || '';
  const levelFilter = document.getElementById('levelFilter')?.value || '';
  
  let skills = getAllSkills();
  
  if (searchTerm) {
    skills = skills.filter(skillData => 
      skillData.skill.name.toLowerCase().includes(searchTerm) ||
      skillData.skill.description.toLowerCase().includes(searchTerm) ||
      skillData.user.name.toLowerCase().includes(searchTerm)
    );
  }
  
  if (categoryFilter) {
    skills = skills.filter(skillData => skillData.skill.category === categoryFilter);
  }
  
  if (levelFilter) {
    skills = skills.filter(skillData => skillData.skill.experience_level === levelFilter);
  }
  
  renderSkillsGrid(skills);
}

// Find skill matches for a user
function findSkillMatches(user) {
  const matches = [];
  
  // Find users who offer what this user wants
  user.skills_wanted.forEach(wantedSkill => {
    AppState.users.forEach(otherUser => {
      if (otherUser.id === user.id) return;
      
      otherUser.skills_offered.forEach(offeredSkill => {
        if (offeredSkill.name.toLowerCase().includes(wantedSkill.name.toLowerCase()) ||
            wantedSkill.name.toLowerCase().includes(offeredSkill.name.toLowerCase())) {
          matches.push({
            user: otherUser,
            skill: offeredSkill,
            matchScore: calculateMatchScore(wantedSkill, offeredSkill, user, otherUser)
          });
        }
      });
    });
  });
  
  // Sort by match score
  return matches.sort((a, b) => b.matchScore - a.matchScore);
}

// Calculate match score
function calculateMatchScore(wantedSkill, offeredSkill, user, otherUser) {
  let score = 0;
  
  // Exact skill name match
  if (wantedSkill.name.toLowerCase() === offeredSkill.name.toLowerCase()) {
    score += 50;
  }
  
  // Category match
  if (wantedSkill.category === offeredSkill.category) {
    score += 20;
  }
  
  // Experience level compatibility
  const levelMap = { 'Beginner': 1, 'Intermediate': 2, 'Advanced': 3, 'Expert': 4 };
  const wantedLevel = levelMap[wantedSkill.experience_level] || 1;
  const offeredLevel = levelMap[offeredSkill.experience_level] || 1;
  
  if (offeredLevel >= wantedLevel) {
    score += 15;
  }
  
  // User rating
  score += otherUser.rating * 2;
  
  // Mutual skill exchange potential
  const canTeachBack = user.skills_offered.some(userSkill => 
    otherUser.skills_wanted.some(otherWanted => 
      userSkill.name.toLowerCase().includes(otherWanted.name.toLowerCase())
    )
  );
  
  if (canTeachBack) {
    score += 30;
  }
  
  return score;
}

// Render Profile
function renderProfile(userId) {
  const user = userId ? AppState.users.find(u => u.id === parseInt(userId)) : AppState.currentUser;
  if (!user) return;
  
  const isOwnProfile = AppState.currentUser && AppState.currentUser.id === user.id;
  const profileContainer = document.getElementById('profileContainer');
  
  profileContainer.innerHTML = `
    <div class="profile-header">
      <div class="profile-avatar" style="background-image: url(${user.avatar})"></div>
      <div class="profile-info">
        <h1 class="profile-name">${user.name}</h1>
        <p class="profile-bio">${user.bio}</p>
        <div class="profile-stats">
          <div class="profile-stat">
            <div class="profile-stat-number">${user.rating.toFixed(1)}</div>
            <div class="profile-stat-label">Rating</div>
          </div>
          <div class="profile-stat">
            <div class="profile-stat-number">${user.total_exchanges}</div>
            <div class="profile-stat-label">Exchanges</div>
          </div>
          <div class="profile-stat">
            <div class="profile-stat-number">${user.tokens_earned}</div>
            <div class="profile-stat-label">Tokens</div>
          </div>
        </div>
        ${!isOwnProfile && AppState.currentUser ? `
          <div class="profile-actions">
            <button class="btn btn--primary" onclick="navigateToPage('messages')">
              Send Message
            </button>
            <button class="btn btn--outline" onclick="openExchangeModal(${user.id})">
              Request Exchange
            </button>
          </div>
        ` : ''}
      </div>
    </div>
    
    <div class="profile-content">
      <div class="profile-section">
        <h3>Skills Offered (${user.skills_offered.length})</h3>
        ${user.skills_offered.length > 0 
          ? user.skills_offered.map(skill => `
              <div class="skill-item">
                <div class="skill-item-header">
                  <span class="skill-item-name">${skill.name}</span>
                  <span class="skill-item-level">${skill.experience_level}</span>
                </div>
                <p class="skill-item-description">${skill.description}</p>
              </div>
            `).join('')
          : '<p style="color: var(--color-text-secondary);">No skills offered yet.</p>'
        }
      </div>
      
      <div class="profile-section">
        <h3>Skills Wanted (${user.skills_wanted.length})</h3>
        ${user.skills_wanted.length > 0 
          ? user.skills_wanted.map(skill => `
              <div class="skill-item">
                <div class="skill-item-header">
                  <span class="skill-item-name">${skill.name}</span>
                  <span class="skill-item-level">${skill.experience_level}</span>
                </div>
                <p class="skill-item-description">${skill.description}</p>
              </div>
            `).join('')
          : '<p style="color: var(--color-text-secondary);">No skills wanted yet.</p>'
        }
      </div>
      
      <div class="profile-section">
        <h3>Achievements &amp; Badges</h3>
        <div class="badges-grid">
          ${user.badges.map(badge => `<div class="badge">${badge}</div>`).join('')}
        </div>
      </div>
      
      <div class="profile-section">
        <h3>Profile Details</h3>
        <div style="display: grid; gap: 12px;">
          <div><strong>Location:</strong> ${user.location || 'Not specified'}</div>
          <div><strong>Member since:</strong> ${new Date(user.join_date).toLocaleDateString()}</div>
          <div><strong>Active exchanges:</strong> ${user.active_exchanges}</div>
        </div>
      </div>
    </div>
  `;
}

// Render Messages
function renderMessages() {
  if (!AppState.currentUser) return;
  
  renderConversationsList();
  
  if (AppState.activeConversation) {
    renderChatMessages();
  }
}

// Render conversations list
function renderConversationsList() {
  const conversationsList = document.getElementById('conversationsList');
  if (!conversationsList) return;
  
  conversationsList.innerHTML = AppState.conversations.length > 0
    ? AppState.conversations.map(conv => `
        <div class="conversation-item ${AppState.activeConversation && AppState.activeConversation.id === conv.id ? 'active' : ''}"
             onclick="selectConversation(${conv.id})">
          <div class="conversation-avatar" style="background-image: url(${conv.userAvatar})"></div>
          <div class="conversation-info">
            <div class="conversation-name">${conv.userName}</div>
            <div class="conversation-preview">${conv.lastMessage}</div>
          </div>
        </div>
      `).join('')
    : '<p style="color: var(--color-text-secondary);">No conversations yet.</p>';
}

// Select conversation
function selectConversation(conversationId) {
  AppState.activeConversation = AppState.conversations.find(c => c.id === conversationId);
  renderMessages();
  
  // Show chat elements
  document.getElementById('chatHeader').style.display = 'block';
  document.getElementById('chatInput').style.display = 'flex';
  
  // Update chat header
  const chatAvatar = document.getElementById('chatAvatar');
  const chatUserName = document.getElementById('chatUserName');
  
  if (chatAvatar) chatAvatar.src = AppState.activeConversation.userAvatar;
  if (chatUserName) chatUserName.textContent = AppState.activeConversation.userName;
}

// Render chat messages
function renderChatMessages() {
  const chatMessages = document.getElementById('chatMessages');
  if (!chatMessages || !AppState.activeConversation) return;
  
  const messages = AppState.activeConversation.messages;
  
  chatMessages.innerHTML = messages.map(message => {
    const isOwn = AppState.currentUser && message.user_id === AppState.currentUser.id;
    const user = AppState.users.find(u => u.id === message.user_id);
    
    return `
      <div class="message ${isOwn ? 'own' : ''}">
        <div class="message-avatar" style="background-image: url(${user ? user.avatar : ''})"></div>
        <div class="message-content">
          <div class="message-bubble">
            ${message.message}
          </div>
          <div class="message-time">${formatMessageTime(message.timestamp)}</div>
        </div>
      </div>
    `;
  }).join('');
  
  // Scroll to bottom
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Send message
function sendMessage() {
  const messageInput = document.getElementById('messageInput');
  if (!messageInput || !AppState.activeConversation || !AppState.currentUser) return;
  
  const message = messageInput.value.trim();
  if (!message) return;
  
  // Add message to conversation
  const newMessage = {
    user_id: AppState.currentUser.id,
    message: message,
    timestamp: new Date().toISOString().replace('T', ' ').substring(0, 16)
  };
  
  AppState.activeConversation.messages.push(newMessage);
  AppState.activeConversation.lastMessage = message;
  AppState.activeConversation.lastMessageTime = newMessage.timestamp;
  
  // Update the corresponding exchange
  const exchange = AppState.exchanges.find(ex => ex.id === AppState.activeConversation.id);
  if (exchange) {
    if (!exchange.messages) exchange.messages = [];
    exchange.messages.push(newMessage);
  }
  
  // Clear input and re-render
  messageInput.value = '';
  renderMessages();
}

// Format message time
function formatMessageTime(timestamp) {
  const date = new Date(timestamp.replace(' ', 'T'));
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// Open exchange modal
function openExchangeModal(userId, skillName = '') {
  if (!AppState.currentUser) {
    navigateToPage('login');
    return;
  }
  
  const user = AppState.users.find(u => u.id === userId);
  if (!user) return;
  
  const modal = document.getElementById('exchangeModal');
  const modalContent = document.getElementById('exchangeModalContent');
  
  modalContent.innerHTML = `
    <div style="text-align: center; margin-bottom: 24px;">
      <img src="${user.avatar}" alt="${user.name}" 
           style="width: 64px; height: 64px; border-radius: 50%; object-fit: cover; margin-bottom: 12px;">
      <h4>${user.name}</h4>
      <p style="color: var(--color-text-secondary);">${user.bio}</p>
    </div>
    
    <form id="exchangeRequestForm">
      <div class="form-group">
        <label class="form-label">Skill you want to learn</label>
        <select class="form-control" id="requestedSkill" required>
          <option value="">Select a skill...</option>
          ${user.skills_offered.map(skill => `
            <option value="${skill.name}" ${skill.name === skillName ? 'selected' : ''}>
              ${skill.name} (${skill.experience_level})
            </option>
          `).join('')}
        </select>
      </div>
      
      <div class="form-group">
        <label class="form-label">Skill you can offer in return</label>
        <select class="form-control" id="offeredSkill" required>
          <option value="">Select a skill...</option>
          ${AppState.currentUser.skills_offered.map(skill => `
            <option value="${skill.name}">
              ${skill.name} (${skill.experience_level})
            </option>
          `).join('')}
        </select>
      </div>
      
      <div class="form-group">
        <label class="form-label">Message</label>
        <textarea class="form-control" id="exchangeMessage" rows="4" 
                  placeholder="Introduce yourself and explain what you'd like to learn..."></textarea>
      </div>
      
      <button type="submit" class="btn btn--primary btn--full-width">
        Send Exchange Request
      </button>
    </form>
  `;
  
  // Handle form submission
  const form = document.getElementById('exchangeRequestForm');
  form.addEventListener('submit', (e) => {
    e.preventDefault();
    sendExchangeRequest(userId);
  });
  
  modal.classList.add('show');
}

// Send exchange request
function sendExchangeRequest(userId) {
  const requestedSkill = document.getElementById('requestedSkill').value;
  const offeredSkill = document.getElementById('offeredSkill').value;
  const message = document.getElementById('exchangeMessage').value;
  
  if (!requestedSkill || !offeredSkill) {
    showNotification('Please select both skills', 'error');
    return;
  }
  
  // Create new exchange
  const newExchange = {
    id: AppState.exchanges.length + 1,
    requester_id: AppState.currentUser.id,
    provider_id: userId,
    requested_skill: requestedSkill,
    offered_skill: offeredSkill,
    status: 'pending',
    created_date: new Date().toISOString().split('T')[0],
    messages: message ? [{
      user_id: AppState.currentUser.id,
      message: message,
      timestamp: new Date().toISOString().replace('T', ' ').substring(0, 16)
    }] : []
  };
  
  AppState.exchanges.push(newExchange);
  
  // Add to conversations if there's a message
  if (message) {
    const otherUser = AppState.users.find(u => u.id === userId);
    const newConversation = {
      id: newExchange.id,
      userId: userId,
      userName: otherUser.name,
      userAvatar: otherUser.avatar,
      lastMessage: message,
      lastMessageTime: newExchange.messages[0].timestamp,
      messages: newExchange.messages
    };
    AppState.conversations.push(newConversation);
  }
  
  // Close modal and show success
  document.getElementById('exchangeModal').classList.remove('show');
  showNotification('Exchange request sent!', 'success');
}

// Show notification
function showNotification(message, type = 'success') {
  const notification = document.getElementById('notification');
  notification.textContent = message;
  notification.className = `notification ${type} show`;
  
  setTimeout(() => {
    notification.classList.remove('show');
  }, 3000);
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', initializeApp);

// Make functions global for onclick handlers
window.navigateToPage = navigateToPage;
window.openExchangeModal = openExchangeModal;
window.selectConversation = selectConversation;